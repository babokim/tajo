/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "tajo_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace apache { namespace tajo { namespace thrift {

int _kTResultCodeValues[] = {
  TResultCode::OK,
  TResultCode::ERROR
};
const char* _kTResultCodeNames[] = {
  "OK",
  "ERROR"
};
const std::map<int, const char*> _TResultCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTResultCodeValues, _kTResultCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


TServiceException::~TServiceException() throw() {
}


void TServiceException::__set_message(const std::string& val) {
  this->message = val;
}

void TServiceException::__set_trace(const std::string& val) {
  this->trace = val;
}

const char* TServiceException::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t TServiceException::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t TServiceException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->trace);
          this->__isset.trace = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TServiceException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TServiceException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trace", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->trace);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TServiceException &a, TServiceException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.trace, b.trace);
  swap(a.__isset, b.__isset);
}

TServiceException::TServiceException(const TServiceException& other0) : TException() {
  message = other0.message;
  trace = other0.trace;
  __isset = other0.__isset;
}
TServiceException& TServiceException::operator=(const TServiceException& other1) {
  message = other1.message;
  trace = other1.trace;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TServiceException& obj) {
  using apache::thrift::to_string;
  out << "TServiceException(";
  out << "message=" << to_string(obj.message);
  out << ", " << "trace=" << to_string(obj.trace);
  out << ")";
  return out;
}


TColumn::~TColumn() throw() {
}


void TColumn::__set_name(const std::string& val) {
  this->name = val;
}

void TColumn::__set_simpleName(const std::string& val) {
  this->simpleName = val;
}

void TColumn::__set_dataType(const int32_t val) {
  this->dataType = val;
}

void TColumn::__set_dataTypeName(const std::string& val) {
  this->dataTypeName = val;
}

void TColumn::__set_sqlDataTypeName(const std::string& val) {
  this->sqlDataTypeName = val;
}

void TColumn::__set_sqlDataType(const int32_t val) {
  this->sqlDataType = val;
}

const char* TColumn::ascii_fingerprint = "D0726A8A8139BD75529631AE0BD5E8ED";
const uint8_t TColumn::binary_fingerprint[16] = {0xD0,0x72,0x6A,0x8A,0x81,0x39,0xBD,0x75,0x52,0x96,0x31,0xAE,0x0B,0xD5,0xE8,0xED};

uint32_t TColumn::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->simpleName);
          this->__isset.simpleName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dataType);
          this->__isset.dataType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dataTypeName);
          this->__isset.dataTypeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sqlDataTypeName);
          this->__isset.sqlDataTypeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sqlDataType);
          this->__isset.sqlDataType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TColumn::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TColumn");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("simpleName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->simpleName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dataType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->dataType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dataTypeName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->dataTypeName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sqlDataTypeName", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->sqlDataTypeName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sqlDataType", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->sqlDataType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TColumn &a, TColumn &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.simpleName, b.simpleName);
  swap(a.dataType, b.dataType);
  swap(a.dataTypeName, b.dataTypeName);
  swap(a.sqlDataTypeName, b.sqlDataTypeName);
  swap(a.sqlDataType, b.sqlDataType);
  swap(a.__isset, b.__isset);
}

TColumn::TColumn(const TColumn& other2) {
  name = other2.name;
  simpleName = other2.simpleName;
  dataType = other2.dataType;
  dataTypeName = other2.dataTypeName;
  sqlDataTypeName = other2.sqlDataTypeName;
  sqlDataType = other2.sqlDataType;
  __isset = other2.__isset;
}
TColumn& TColumn::operator=(const TColumn& other3) {
  name = other3.name;
  simpleName = other3.simpleName;
  dataType = other3.dataType;
  dataTypeName = other3.dataTypeName;
  sqlDataTypeName = other3.sqlDataTypeName;
  sqlDataType = other3.sqlDataType;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TColumn& obj) {
  using apache::thrift::to_string;
  out << "TColumn(";
  out << "name=" << to_string(obj.name);
  out << ", " << "simpleName=" << to_string(obj.simpleName);
  out << ", " << "dataType=" << to_string(obj.dataType);
  out << ", " << "dataTypeName=" << to_string(obj.dataTypeName);
  out << ", " << "sqlDataTypeName=" << to_string(obj.sqlDataTypeName);
  out << ", " << "sqlDataType=" << to_string(obj.sqlDataType);
  out << ")";
  return out;
}


TSchema::~TSchema() throw() {
}


void TSchema::__set_columns(const std::vector<TColumn> & val) {
  this->columns = val;
}

const char* TSchema::ascii_fingerprint = "7E190571D8D62FFDC52E35059E848E1B";
const uint8_t TSchema::binary_fingerprint[16] = {0x7E,0x19,0x05,0x71,0xD8,0xD6,0x2F,0xFD,0xC5,0x2E,0x35,0x05,0x9E,0x84,0x8E,0x1B};

uint32_t TSchema::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->columns.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->columns.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->columns[_i8].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.columns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSchema::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TSchema");

  xfer += oprot->writeFieldBegin("columns", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->columns.size()));
    std::vector<TColumn> ::const_iterator _iter9;
    for (_iter9 = this->columns.begin(); _iter9 != this->columns.end(); ++_iter9)
    {
      xfer += (*_iter9).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TSchema &a, TSchema &b) {
  using ::std::swap;
  swap(a.columns, b.columns);
  swap(a.__isset, b.__isset);
}

TSchema::TSchema(const TSchema& other10) {
  columns = other10.columns;
  __isset = other10.__isset;
}
TSchema& TSchema::operator=(const TSchema& other11) {
  columns = other11.columns;
  __isset = other11.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TSchema& obj) {
  using apache::thrift::to_string;
  out << "TSchema(";
  out << "columns=" << to_string(obj.columns);
  out << ")";
  return out;
}


TTableStats::~TTableStats() throw() {
}


void TTableStats::__set_numRows(const int64_t val) {
  this->numRows = val;
}

void TTableStats::__set_numBytes(const int64_t val) {
  this->numBytes = val;
}

void TTableStats::__set_numBlocks(const int32_t val) {
  this->numBlocks = val;
}

void TTableStats::__set_numShuffleOutputs(const int32_t val) {
  this->numShuffleOutputs = val;
}

void TTableStats::__set_avgRows(const int64_t val) {
  this->avgRows = val;
}

void TTableStats::__set_readBytes(const int64_t val) {
  this->readBytes = val;
}

const char* TTableStats::ascii_fingerprint = "13BF1042D7D70C1DA841AA45D2446B39";
const uint8_t TTableStats::binary_fingerprint[16] = {0x13,0xBF,0x10,0x42,0xD7,0xD7,0x0C,0x1D,0xA8,0x41,0xAA,0x45,0xD2,0x44,0x6B,0x39};

uint32_t TTableStats::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numRows);
          this->__isset.numRows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numBytes);
          this->__isset.numBytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numBlocks);
          this->__isset.numBlocks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numShuffleOutputs);
          this->__isset.numShuffleOutputs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->avgRows);
          this->__isset.avgRows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->readBytes);
          this->__isset.readBytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TTableStats::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TTableStats");

  xfer += oprot->writeFieldBegin("numRows", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->numRows);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numBytes", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->numBytes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numBlocks", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->numBlocks);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numShuffleOutputs", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->numShuffleOutputs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avgRows", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->avgRows);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("readBytes", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->readBytes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TTableStats &a, TTableStats &b) {
  using ::std::swap;
  swap(a.numRows, b.numRows);
  swap(a.numBytes, b.numBytes);
  swap(a.numBlocks, b.numBlocks);
  swap(a.numShuffleOutputs, b.numShuffleOutputs);
  swap(a.avgRows, b.avgRows);
  swap(a.readBytes, b.readBytes);
  swap(a.__isset, b.__isset);
}

TTableStats::TTableStats(const TTableStats& other12) {
  numRows = other12.numRows;
  numBytes = other12.numBytes;
  numBlocks = other12.numBlocks;
  numShuffleOutputs = other12.numShuffleOutputs;
  avgRows = other12.avgRows;
  readBytes = other12.readBytes;
  __isset = other12.__isset;
}
TTableStats& TTableStats::operator=(const TTableStats& other13) {
  numRows = other13.numRows;
  numBytes = other13.numBytes;
  numBlocks = other13.numBlocks;
  numShuffleOutputs = other13.numShuffleOutputs;
  avgRows = other13.avgRows;
  readBytes = other13.readBytes;
  __isset = other13.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TTableStats& obj) {
  using apache::thrift::to_string;
  out << "TTableStats(";
  out << "numRows=" << to_string(obj.numRows);
  out << ", " << "numBytes=" << to_string(obj.numBytes);
  out << ", " << "numBlocks=" << to_string(obj.numBlocks);
  out << ", " << "numShuffleOutputs=" << to_string(obj.numShuffleOutputs);
  out << ", " << "avgRows=" << to_string(obj.avgRows);
  out << ", " << "readBytes=" << to_string(obj.readBytes);
  out << ")";
  return out;
}


TPartitionMethod::~TPartitionMethod() throw() {
}


void TPartitionMethod::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void TPartitionMethod::__set_partitionType(const std::string& val) {
  this->partitionType = val;
}

void TPartitionMethod::__set_expression(const std::string& val) {
  this->expression = val;
}

void TPartitionMethod::__set_expressionSchema(const TSchema& val) {
  this->expressionSchema = val;
}

const char* TPartitionMethod::ascii_fingerprint = "10EE3E0E7747448638250E0A552D9145";
const uint8_t TPartitionMethod::binary_fingerprint[16] = {0x10,0xEE,0x3E,0x0E,0x77,0x47,0x44,0x86,0x38,0x25,0x0E,0x0A,0x55,0x2D,0x91,0x45};

uint32_t TPartitionMethod::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partitionType);
          this->__isset.partitionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->expression);
          this->__isset.expression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->expressionSchema.read(iprot);
          this->__isset.expressionSchema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPartitionMethod::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TPartitionMethod");

  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partitionType", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->partitionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expression", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->expression);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expressionSchema", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->expressionSchema.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TPartitionMethod &a, TPartitionMethod &b) {
  using ::std::swap;
  swap(a.tableName, b.tableName);
  swap(a.partitionType, b.partitionType);
  swap(a.expression, b.expression);
  swap(a.expressionSchema, b.expressionSchema);
  swap(a.__isset, b.__isset);
}

TPartitionMethod::TPartitionMethod(const TPartitionMethod& other14) {
  tableName = other14.tableName;
  partitionType = other14.partitionType;
  expression = other14.expression;
  expressionSchema = other14.expressionSchema;
  __isset = other14.__isset;
}
TPartitionMethod& TPartitionMethod::operator=(const TPartitionMethod& other15) {
  tableName = other15.tableName;
  partitionType = other15.partitionType;
  expression = other15.expression;
  expressionSchema = other15.expressionSchema;
  __isset = other15.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TPartitionMethod& obj) {
  using apache::thrift::to_string;
  out << "TPartitionMethod(";
  out << "tableName=" << to_string(obj.tableName);
  out << ", " << "partitionType=" << to_string(obj.partitionType);
  out << ", " << "expression=" << to_string(obj.expression);
  out << ", " << "expressionSchema=" << to_string(obj.expressionSchema);
  out << ")";
  return out;
}


TTableDesc::~TTableDesc() throw() {
}


void TTableDesc::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void TTableDesc::__set_path(const std::string& val) {
  this->path = val;
}

void TTableDesc::__set_storeType(const std::string& val) {
  this->storeType = val;
}

void TTableDesc::__set_tableMeta(const std::map<std::string, std::string> & val) {
  this->tableMeta = val;
}

void TTableDesc::__set_schema(const TSchema& val) {
  this->schema = val;
}

void TTableDesc::__set_stats(const TTableStats& val) {
  this->stats = val;
}

void TTableDesc::__set_partition(const TPartitionMethod& val) {
  this->partition = val;
}

void TTableDesc::__set_isExternal(const bool val) {
  this->isExternal = val;
}

const char* TTableDesc::ascii_fingerprint = "4ED37BAD910602AF8A8D7553050614C0";
const uint8_t TTableDesc::binary_fingerprint[16] = {0x4E,0xD3,0x7B,0xAD,0x91,0x06,0x02,0xAF,0x8A,0x8D,0x75,0x53,0x05,0x06,0x14,0xC0};

uint32_t TTableDesc::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storeType);
          this->__isset.storeType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->tableMeta.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _ktype17;
            ::apache::thrift::protocol::TType _vtype18;
            xfer += iprot->readMapBegin(_ktype17, _vtype18, _size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              std::string _key21;
              xfer += iprot->readString(_key21);
              std::string& _val22 = this->tableMeta[_key21];
              xfer += iprot->readString(_val22);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.tableMeta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->schema.read(iprot);
          this->__isset.schema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->stats.read(iprot);
          this->__isset.stats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->partition.read(iprot);
          this->__isset.partition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isExternal);
          this->__isset.isExternal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TTableDesc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TTableDesc");

  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("storeType", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->storeType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tableMeta", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tableMeta.size()));
    std::map<std::string, std::string> ::const_iterator _iter23;
    for (_iter23 = this->tableMeta.begin(); _iter23 != this->tableMeta.end(); ++_iter23)
    {
      xfer += oprot->writeString(_iter23->first);
      xfer += oprot->writeString(_iter23->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("schema", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->schema.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stats", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->stats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partition", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->partition.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isExternal", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->isExternal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TTableDesc &a, TTableDesc &b) {
  using ::std::swap;
  swap(a.tableName, b.tableName);
  swap(a.path, b.path);
  swap(a.storeType, b.storeType);
  swap(a.tableMeta, b.tableMeta);
  swap(a.schema, b.schema);
  swap(a.stats, b.stats);
  swap(a.partition, b.partition);
  swap(a.isExternal, b.isExternal);
  swap(a.__isset, b.__isset);
}

TTableDesc::TTableDesc(const TTableDesc& other24) {
  tableName = other24.tableName;
  path = other24.path;
  storeType = other24.storeType;
  tableMeta = other24.tableMeta;
  schema = other24.schema;
  stats = other24.stats;
  partition = other24.partition;
  isExternal = other24.isExternal;
  __isset = other24.__isset;
}
TTableDesc& TTableDesc::operator=(const TTableDesc& other25) {
  tableName = other25.tableName;
  path = other25.path;
  storeType = other25.storeType;
  tableMeta = other25.tableMeta;
  schema = other25.schema;
  stats = other25.stats;
  partition = other25.partition;
  isExternal = other25.isExternal;
  __isset = other25.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TTableDesc& obj) {
  using apache::thrift::to_string;
  out << "TTableDesc(";
  out << "tableName=" << to_string(obj.tableName);
  out << ", " << "path=" << to_string(obj.path);
  out << ", " << "storeType=" << to_string(obj.storeType);
  out << ", " << "tableMeta=" << to_string(obj.tableMeta);
  out << ", " << "schema=" << to_string(obj.schema);
  out << ", " << "stats=" << to_string(obj.stats);
  out << ", " << "partition=" << to_string(obj.partition);
  out << ", " << "isExternal=" << to_string(obj.isExternal);
  out << ")";
  return out;
}


TRowData::~TRowData() throw() {
}


void TRowData::__set_nullFlags(const std::vector<bool> & val) {
  this->nullFlags = val;
}

void TRowData::__set_columnDatas(const std::vector<std::string> & val) {
  this->columnDatas = val;
}

const char* TRowData::ascii_fingerprint = "AAC17AFDB1C7D605311FBCBA63ABE008";
const uint8_t TRowData::binary_fingerprint[16] = {0xAA,0xC1,0x7A,0xFD,0xB1,0xC7,0xD6,0x05,0x31,0x1F,0xBC,0xBA,0x63,0xAB,0xE0,0x08};

uint32_t TRowData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nullFlags.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _etype29;
            xfer += iprot->readListBegin(_etype29, _size26);
            this->nullFlags.resize(_size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              xfer += iprot->readBool(this->nullFlags[_i30]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nullFlags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->columnDatas.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _etype34;
            xfer += iprot->readListBegin(_etype34, _size31);
            this->columnDatas.resize(_size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              xfer += iprot->readBinary(this->columnDatas[_i35]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.columnDatas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TRowData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TRowData");

  xfer += oprot->writeFieldBegin("nullFlags", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->nullFlags.size()));
    std::vector<bool> ::const_iterator _iter36;
    for (_iter36 = this->nullFlags.begin(); _iter36 != this->nullFlags.end(); ++_iter36)
    {
      xfer += oprot->writeBool((*_iter36));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("columnDatas", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->columnDatas.size()));
    std::vector<std::string> ::const_iterator _iter37;
    for (_iter37 = this->columnDatas.begin(); _iter37 != this->columnDatas.end(); ++_iter37)
    {
      xfer += oprot->writeBinary((*_iter37));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TRowData &a, TRowData &b) {
  using ::std::swap;
  swap(a.nullFlags, b.nullFlags);
  swap(a.columnDatas, b.columnDatas);
  swap(a.__isset, b.__isset);
}

TRowData::TRowData(const TRowData& other38) {
  nullFlags = other38.nullFlags;
  columnDatas = other38.columnDatas;
  __isset = other38.__isset;
}
TRowData& TRowData::operator=(const TRowData& other39) {
  nullFlags = other39.nullFlags;
  columnDatas = other39.columnDatas;
  __isset = other39.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TRowData& obj) {
  using apache::thrift::to_string;
  out << "TRowData(";
  out << "nullFlags=" << to_string(obj.nullFlags);
  out << ", " << "columnDatas=" << to_string(obj.columnDatas);
  out << ")";
  return out;
}


TQueryResult::~TQueryResult() throw() {
}


void TQueryResult::__set_tableDesc(const TTableDesc& val) {
  this->tableDesc = val;
}

void TQueryResult::__set_rows(const std::vector<TRowData> & val) {
  this->rows = val;
}

void TQueryResult::__set_schema(const TSchema& val) {
  this->schema = val;
}

const char* TQueryResult::ascii_fingerprint = "6929FF7F81C3659DCAFCDD2FA5608629";
const uint8_t TQueryResult::binary_fingerprint[16] = {0x69,0x29,0xFF,0x7F,0x81,0xC3,0x65,0x9D,0xCA,0xFC,0xDD,0x2F,0xA5,0x60,0x86,0x29};

uint32_t TQueryResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tableDesc.read(iprot);
          this->__isset.tableDesc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rows.clear();
            uint32_t _size40;
            ::apache::thrift::protocol::TType _etype43;
            xfer += iprot->readListBegin(_etype43, _size40);
            this->rows.resize(_size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              xfer += this->rows[_i44].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.rows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->schema.read(iprot);
          this->__isset.schema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TQueryResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TQueryResult");

  xfer += oprot->writeFieldBegin("tableDesc", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->tableDesc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rows", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->rows.size()));
    std::vector<TRowData> ::const_iterator _iter45;
    for (_iter45 = this->rows.begin(); _iter45 != this->rows.end(); ++_iter45)
    {
      xfer += (*_iter45).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("schema", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->schema.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TQueryResult &a, TQueryResult &b) {
  using ::std::swap;
  swap(a.tableDesc, b.tableDesc);
  swap(a.rows, b.rows);
  swap(a.schema, b.schema);
  swap(a.__isset, b.__isset);
}

TQueryResult::TQueryResult(const TQueryResult& other46) {
  tableDesc = other46.tableDesc;
  rows = other46.rows;
  schema = other46.schema;
  __isset = other46.__isset;
}
TQueryResult& TQueryResult::operator=(const TQueryResult& other47) {
  tableDesc = other47.tableDesc;
  rows = other47.rows;
  schema = other47.schema;
  __isset = other47.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TQueryResult& obj) {
  using apache::thrift::to_string;
  out << "TQueryResult(";
  out << "tableDesc=" << to_string(obj.tableDesc);
  out << ", " << "rows=" << to_string(obj.rows);
  out << ", " << "schema=" << to_string(obj.schema);
  out << ")";
  return out;
}


TGetQueryStatusResponse::~TGetQueryStatusResponse() throw() {
}


void TGetQueryStatusResponse::__set_resultCode(const std::string& val) {
  this->resultCode = val;
}

void TGetQueryStatusResponse::__set_queryId(const std::string& val) {
  this->queryId = val;
}

void TGetQueryStatusResponse::__set_state(const std::string& val) {
  this->state = val;
}

void TGetQueryStatusResponse::__set_progress(const double val) {
  this->progress = val;
}

void TGetQueryStatusResponse::__set_submitTime(const int64_t val) {
  this->submitTime = val;
}

void TGetQueryStatusResponse::__set_finishTime(const int64_t val) {
  this->finishTime = val;
}

void TGetQueryStatusResponse::__set_hasResult(const bool val) {
  this->hasResult = val;
}

void TGetQueryStatusResponse::__set_errorMessage(const std::string& val) {
  this->errorMessage = val;
}

void TGetQueryStatusResponse::__set_errorTrace(const std::string& val) {
  this->errorTrace = val;
}

void TGetQueryStatusResponse::__set_queryMasterHost(const std::string& val) {
  this->queryMasterHost = val;
}

void TGetQueryStatusResponse::__set_queryMasterPort(const int32_t val) {
  this->queryMasterPort = val;
}

void TGetQueryStatusResponse::__set_queryResult(const TQueryResult& val) {
  this->queryResult = val;
}

const char* TGetQueryStatusResponse::ascii_fingerprint = "B353B604FF6B0A6D90F2BF75125E13D0";
const uint8_t TGetQueryStatusResponse::binary_fingerprint[16] = {0xB3,0x53,0xB6,0x04,0xFF,0x6B,0x0A,0x6D,0x90,0xF2,0xBF,0x75,0x12,0x5E,0x13,0xD0};

uint32_t TGetQueryStatusResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resultCode);
          this->__isset.resultCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queryId);
          this->__isset.queryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->progress);
          this->__isset.progress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->submitTime);
          this->__isset.submitTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->finishTime);
          this->__isset.finishTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasResult);
          this->__isset.hasResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errorMessage);
          this->__isset.errorMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errorTrace);
          this->__isset.errorTrace = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queryMasterHost);
          this->__isset.queryMasterHost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->queryMasterPort);
          this->__isset.queryMasterPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->queryResult.read(iprot);
          this->__isset.queryResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TGetQueryStatusResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TGetQueryStatusResponse");

  xfer += oprot->writeFieldBegin("resultCode", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->resultCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queryId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->queryId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("progress", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->progress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("submitTime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->submitTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finishTime", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->finishTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasResult", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->hasResult);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorMessage", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->errorMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorTrace", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->errorTrace);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queryMasterHost", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->queryMasterHost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queryMasterPort", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->queryMasterPort);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queryResult", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->queryResult.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TGetQueryStatusResponse &a, TGetQueryStatusResponse &b) {
  using ::std::swap;
  swap(a.resultCode, b.resultCode);
  swap(a.queryId, b.queryId);
  swap(a.state, b.state);
  swap(a.progress, b.progress);
  swap(a.submitTime, b.submitTime);
  swap(a.finishTime, b.finishTime);
  swap(a.hasResult, b.hasResult);
  swap(a.errorMessage, b.errorMessage);
  swap(a.errorTrace, b.errorTrace);
  swap(a.queryMasterHost, b.queryMasterHost);
  swap(a.queryMasterPort, b.queryMasterPort);
  swap(a.queryResult, b.queryResult);
  swap(a.__isset, b.__isset);
}

TGetQueryStatusResponse::TGetQueryStatusResponse(const TGetQueryStatusResponse& other48) {
  resultCode = other48.resultCode;
  queryId = other48.queryId;
  state = other48.state;
  progress = other48.progress;
  submitTime = other48.submitTime;
  finishTime = other48.finishTime;
  hasResult = other48.hasResult;
  errorMessage = other48.errorMessage;
  errorTrace = other48.errorTrace;
  queryMasterHost = other48.queryMasterHost;
  queryMasterPort = other48.queryMasterPort;
  queryResult = other48.queryResult;
  __isset = other48.__isset;
}
TGetQueryStatusResponse& TGetQueryStatusResponse::operator=(const TGetQueryStatusResponse& other49) {
  resultCode = other49.resultCode;
  queryId = other49.queryId;
  state = other49.state;
  progress = other49.progress;
  submitTime = other49.submitTime;
  finishTime = other49.finishTime;
  hasResult = other49.hasResult;
  errorMessage = other49.errorMessage;
  errorTrace = other49.errorTrace;
  queryMasterHost = other49.queryMasterHost;
  queryMasterPort = other49.queryMasterPort;
  queryResult = other49.queryResult;
  __isset = other49.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TGetQueryStatusResponse& obj) {
  using apache::thrift::to_string;
  out << "TGetQueryStatusResponse(";
  out << "resultCode=" << to_string(obj.resultCode);
  out << ", " << "queryId=" << to_string(obj.queryId);
  out << ", " << "state=" << to_string(obj.state);
  out << ", " << "progress=" << to_string(obj.progress);
  out << ", " << "submitTime=" << to_string(obj.submitTime);
  out << ", " << "finishTime=" << to_string(obj.finishTime);
  out << ", " << "hasResult=" << to_string(obj.hasResult);
  out << ", " << "errorMessage=" << to_string(obj.errorMessage);
  out << ", " << "errorTrace=" << to_string(obj.errorTrace);
  out << ", " << "queryMasterHost=" << to_string(obj.queryMasterHost);
  out << ", " << "queryMasterPort=" << to_string(obj.queryMasterPort);
  out << ", " << "queryResult=" << to_string(obj.queryResult);
  out << ")";
  return out;
}


TServerResponse::~TServerResponse() throw() {
}


void TServerResponse::__set_resultCode(const std::string& val) {
  this->resultCode = val;
}

void TServerResponse::__set_boolResult(const bool val) {
  this->boolResult = val;
}

void TServerResponse::__set_errorMessage(const std::string& val) {
  this->errorMessage = val;
}

void TServerResponse::__set_detailErrorMessage(const std::string& val) {
  this->detailErrorMessage = val;
}

void TServerResponse::__set_sessionId(const std::string& val) {
  this->sessionId = val;
}

const char* TServerResponse::ascii_fingerprint = "55F05A45A6E335B039B8DEE3FEA1D5D3";
const uint8_t TServerResponse::binary_fingerprint[16] = {0x55,0xF0,0x5A,0x45,0xA6,0xE3,0x35,0xB0,0x39,0xB8,0xDE,0xE3,0xFE,0xA1,0xD5,0xD3};

uint32_t TServerResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resultCode);
          this->__isset.resultCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->boolResult);
          this->__isset.boolResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errorMessage);
          this->__isset.errorMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detailErrorMessage);
          this->__isset.detailErrorMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sessionId);
          this->__isset.sessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TServerResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TServerResponse");

  xfer += oprot->writeFieldBegin("resultCode", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->resultCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("boolResult", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->boolResult);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorMessage", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->errorMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detailErrorMessage", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->detailErrorMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessionId", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->sessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TServerResponse &a, TServerResponse &b) {
  using ::std::swap;
  swap(a.resultCode, b.resultCode);
  swap(a.boolResult, b.boolResult);
  swap(a.errorMessage, b.errorMessage);
  swap(a.detailErrorMessage, b.detailErrorMessage);
  swap(a.sessionId, b.sessionId);
  swap(a.__isset, b.__isset);
}

TServerResponse::TServerResponse(const TServerResponse& other50) {
  resultCode = other50.resultCode;
  boolResult = other50.boolResult;
  errorMessage = other50.errorMessage;
  detailErrorMessage = other50.detailErrorMessage;
  sessionId = other50.sessionId;
  __isset = other50.__isset;
}
TServerResponse& TServerResponse::operator=(const TServerResponse& other51) {
  resultCode = other51.resultCode;
  boolResult = other51.boolResult;
  errorMessage = other51.errorMessage;
  detailErrorMessage = other51.detailErrorMessage;
  sessionId = other51.sessionId;
  __isset = other51.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TServerResponse& obj) {
  using apache::thrift::to_string;
  out << "TServerResponse(";
  out << "resultCode=" << to_string(obj.resultCode);
  out << ", " << "boolResult=" << to_string(obj.boolResult);
  out << ", " << "errorMessage=" << to_string(obj.errorMessage);
  out << ", " << "detailErrorMessage=" << to_string(obj.detailErrorMessage);
  out << ", " << "sessionId=" << to_string(obj.sessionId);
  out << ")";
  return out;
}


TBriefQueryInfo::~TBriefQueryInfo() throw() {
}


void TBriefQueryInfo::__set_queryId(const std::string& val) {
  this->queryId = val;
}

void TBriefQueryInfo::__set_state(const std::string& val) {
  this->state = val;
}

void TBriefQueryInfo::__set_startTime(const int64_t val) {
  this->startTime = val;
}

void TBriefQueryInfo::__set_finishTime(const int64_t val) {
  this->finishTime = val;
}

void TBriefQueryInfo::__set_query(const std::string& val) {
  this->query = val;
}

void TBriefQueryInfo::__set_queryMasterHost(const std::string& val) {
  this->queryMasterHost = val;
}

void TBriefQueryInfo::__set_queryMasterPort(const int32_t val) {
  this->queryMasterPort = val;
}

void TBriefQueryInfo::__set_progress(const double val) {
  this->progress = val;
}

const char* TBriefQueryInfo::ascii_fingerprint = "F6E967335A53372B733562C4804A4FCB";
const uint8_t TBriefQueryInfo::binary_fingerprint[16] = {0xF6,0xE9,0x67,0x33,0x5A,0x53,0x37,0x2B,0x73,0x35,0x62,0xC4,0x80,0x4A,0x4F,0xCB};

uint32_t TBriefQueryInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queryId);
          this->__isset.queryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->finishTime);
          this->__isset.finishTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->query);
          this->__isset.query = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queryMasterHost);
          this->__isset.queryMasterHost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->queryMasterPort);
          this->__isset.queryMasterPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->progress);
          this->__isset.progress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TBriefQueryInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TBriefQueryInfo");

  xfer += oprot->writeFieldBegin("queryId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queryId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finishTime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->finishTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("query", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->query);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queryMasterHost", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->queryMasterHost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queryMasterPort", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->queryMasterPort);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("progress", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->progress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TBriefQueryInfo &a, TBriefQueryInfo &b) {
  using ::std::swap;
  swap(a.queryId, b.queryId);
  swap(a.state, b.state);
  swap(a.startTime, b.startTime);
  swap(a.finishTime, b.finishTime);
  swap(a.query, b.query);
  swap(a.queryMasterHost, b.queryMasterHost);
  swap(a.queryMasterPort, b.queryMasterPort);
  swap(a.progress, b.progress);
  swap(a.__isset, b.__isset);
}

TBriefQueryInfo::TBriefQueryInfo(const TBriefQueryInfo& other52) {
  queryId = other52.queryId;
  state = other52.state;
  startTime = other52.startTime;
  finishTime = other52.finishTime;
  query = other52.query;
  queryMasterHost = other52.queryMasterHost;
  queryMasterPort = other52.queryMasterPort;
  progress = other52.progress;
  __isset = other52.__isset;
}
TBriefQueryInfo& TBriefQueryInfo::operator=(const TBriefQueryInfo& other53) {
  queryId = other53.queryId;
  state = other53.state;
  startTime = other53.startTime;
  finishTime = other53.finishTime;
  query = other53.query;
  queryMasterHost = other53.queryMasterHost;
  queryMasterPort = other53.queryMasterPort;
  progress = other53.progress;
  __isset = other53.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TBriefQueryInfo& obj) {
  using apache::thrift::to_string;
  out << "TBriefQueryInfo(";
  out << "queryId=" << to_string(obj.queryId);
  out << ", " << "state=" << to_string(obj.state);
  out << ", " << "startTime=" << to_string(obj.startTime);
  out << ", " << "finishTime=" << to_string(obj.finishTime);
  out << ", " << "query=" << to_string(obj.query);
  out << ", " << "queryMasterHost=" << to_string(obj.queryMasterHost);
  out << ", " << "queryMasterPort=" << to_string(obj.queryMasterPort);
  out << ", " << "progress=" << to_string(obj.progress);
  out << ")";
  return out;
}

}}} // namespace
