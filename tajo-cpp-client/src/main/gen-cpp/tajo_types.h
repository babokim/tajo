/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tajo_TYPES_H
#define tajo_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace apache { namespace tajo { namespace thrift {

struct TResultCode {
  enum type {
    OK = 0,
    ERROR = 1
  };
};

extern const std::map<int, const char*> _TResultCode_VALUES_TO_NAMES;

class TServiceException;

class TColumn;

class TSchema;

class TTableStats;

class TPartitionMethod;

class TTableDesc;

class TRowData;

class TQueryResult;

class TGetQueryStatusResponse;

class TServerResponse;

class TBriefQueryInfo;

typedef struct _TServiceException__isset {
  _TServiceException__isset() : message(false), trace(false) {}
  bool message :1;
  bool trace :1;
} _TServiceException__isset;

class TServiceException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  TServiceException(const TServiceException&);
  TServiceException& operator=(const TServiceException&);
  TServiceException() : message(), trace() {
  }

  virtual ~TServiceException() throw();
  std::string message;
  std::string trace;

  _TServiceException__isset __isset;

  void __set_message(const std::string& val);

  void __set_trace(const std::string& val);

  bool operator == (const TServiceException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (!(trace == rhs.trace))
      return false;
    return true;
  }
  bool operator != (const TServiceException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TServiceException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TServiceException& obj);
};

void swap(TServiceException &a, TServiceException &b);

typedef struct _TColumn__isset {
  _TColumn__isset() : name(false), simpleName(false), dataType(false), dataTypeName(false), sqlDataTypeName(false), sqlDataType(false) {}
  bool name :1;
  bool simpleName :1;
  bool dataType :1;
  bool dataTypeName :1;
  bool sqlDataTypeName :1;
  bool sqlDataType :1;
} _TColumn__isset;

class TColumn {
 public:

  static const char* ascii_fingerprint; // = "D0726A8A8139BD75529631AE0BD5E8ED";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0x72,0x6A,0x8A,0x81,0x39,0xBD,0x75,0x52,0x96,0x31,0xAE,0x0B,0xD5,0xE8,0xED};

  TColumn(const TColumn&);
  TColumn& operator=(const TColumn&);
  TColumn() : name(), simpleName(), dataType(0), dataTypeName(), sqlDataTypeName(), sqlDataType(0) {
  }

  virtual ~TColumn() throw();
  std::string name;
  std::string simpleName;
  int32_t dataType;
  std::string dataTypeName;
  std::string sqlDataTypeName;
  int32_t sqlDataType;

  _TColumn__isset __isset;

  void __set_name(const std::string& val);

  void __set_simpleName(const std::string& val);

  void __set_dataType(const int32_t val);

  void __set_dataTypeName(const std::string& val);

  void __set_sqlDataTypeName(const std::string& val);

  void __set_sqlDataType(const int32_t val);

  bool operator == (const TColumn & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(simpleName == rhs.simpleName))
      return false;
    if (!(dataType == rhs.dataType))
      return false;
    if (!(dataTypeName == rhs.dataTypeName))
      return false;
    if (!(sqlDataTypeName == rhs.sqlDataTypeName))
      return false;
    if (!(sqlDataType == rhs.sqlDataType))
      return false;
    return true;
  }
  bool operator != (const TColumn &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumn & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TColumn& obj);
};

void swap(TColumn &a, TColumn &b);

typedef struct _TSchema__isset {
  _TSchema__isset() : columns(false) {}
  bool columns :1;
} _TSchema__isset;

class TSchema {
 public:

  static const char* ascii_fingerprint; // = "7E190571D8D62FFDC52E35059E848E1B";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x19,0x05,0x71,0xD8,0xD6,0x2F,0xFD,0xC5,0x2E,0x35,0x05,0x9E,0x84,0x8E,0x1B};

  TSchema(const TSchema&);
  TSchema& operator=(const TSchema&);
  TSchema() {
  }

  virtual ~TSchema() throw();
  std::vector<TColumn>  columns;

  _TSchema__isset __isset;

  void __set_columns(const std::vector<TColumn> & val);

  bool operator == (const TSchema & rhs) const
  {
    if (!(columns == rhs.columns))
      return false;
    return true;
  }
  bool operator != (const TSchema &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSchema & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TSchema& obj);
};

void swap(TSchema &a, TSchema &b);

typedef struct _TTableStats__isset {
  _TTableStats__isset() : numRows(false), numBytes(false), numBlocks(false), numShuffleOutputs(false), avgRows(false), readBytes(false) {}
  bool numRows :1;
  bool numBytes :1;
  bool numBlocks :1;
  bool numShuffleOutputs :1;
  bool avgRows :1;
  bool readBytes :1;
} _TTableStats__isset;

class TTableStats {
 public:

  static const char* ascii_fingerprint; // = "13BF1042D7D70C1DA841AA45D2446B39";
  static const uint8_t binary_fingerprint[16]; // = {0x13,0xBF,0x10,0x42,0xD7,0xD7,0x0C,0x1D,0xA8,0x41,0xAA,0x45,0xD2,0x44,0x6B,0x39};

  TTableStats(const TTableStats&);
  TTableStats& operator=(const TTableStats&);
  TTableStats() : numRows(0), numBytes(0), numBlocks(0), numShuffleOutputs(0), avgRows(0), readBytes(0) {
  }

  virtual ~TTableStats() throw();
  int64_t numRows;
  int64_t numBytes;
  int32_t numBlocks;
  int32_t numShuffleOutputs;
  int64_t avgRows;
  int64_t readBytes;

  _TTableStats__isset __isset;

  void __set_numRows(const int64_t val);

  void __set_numBytes(const int64_t val);

  void __set_numBlocks(const int32_t val);

  void __set_numShuffleOutputs(const int32_t val);

  void __set_avgRows(const int64_t val);

  void __set_readBytes(const int64_t val);

  bool operator == (const TTableStats & rhs) const
  {
    if (!(numRows == rhs.numRows))
      return false;
    if (!(numBytes == rhs.numBytes))
      return false;
    if (!(numBlocks == rhs.numBlocks))
      return false;
    if (!(numShuffleOutputs == rhs.numShuffleOutputs))
      return false;
    if (!(avgRows == rhs.avgRows))
      return false;
    if (!(readBytes == rhs.readBytes))
      return false;
    return true;
  }
  bool operator != (const TTableStats &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTableStats & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TTableStats& obj);
};

void swap(TTableStats &a, TTableStats &b);

typedef struct _TPartitionMethod__isset {
  _TPartitionMethod__isset() : tableName(false), partitionType(false), expression(false), expressionSchema(false) {}
  bool tableName :1;
  bool partitionType :1;
  bool expression :1;
  bool expressionSchema :1;
} _TPartitionMethod__isset;

class TPartitionMethod {
 public:

  static const char* ascii_fingerprint; // = "10EE3E0E7747448638250E0A552D9145";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0xEE,0x3E,0x0E,0x77,0x47,0x44,0x86,0x38,0x25,0x0E,0x0A,0x55,0x2D,0x91,0x45};

  TPartitionMethod(const TPartitionMethod&);
  TPartitionMethod& operator=(const TPartitionMethod&);
  TPartitionMethod() : tableName(), partitionType(), expression() {
  }

  virtual ~TPartitionMethod() throw();
  std::string tableName;
  std::string partitionType;
  std::string expression;
  TSchema expressionSchema;

  _TPartitionMethod__isset __isset;

  void __set_tableName(const std::string& val);

  void __set_partitionType(const std::string& val);

  void __set_expression(const std::string& val);

  void __set_expressionSchema(const TSchema& val);

  bool operator == (const TPartitionMethod & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    if (!(partitionType == rhs.partitionType))
      return false;
    if (!(expression == rhs.expression))
      return false;
    if (!(expressionSchema == rhs.expressionSchema))
      return false;
    return true;
  }
  bool operator != (const TPartitionMethod &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPartitionMethod & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TPartitionMethod& obj);
};

void swap(TPartitionMethod &a, TPartitionMethod &b);

typedef struct _TTableDesc__isset {
  _TTableDesc__isset() : tableName(false), path(false), storeType(false), tableMeta(false), schema(false), stats(false), partition(false), isExternal(false) {}
  bool tableName :1;
  bool path :1;
  bool storeType :1;
  bool tableMeta :1;
  bool schema :1;
  bool stats :1;
  bool partition :1;
  bool isExternal :1;
} _TTableDesc__isset;

class TTableDesc {
 public:

  static const char* ascii_fingerprint; // = "4ED37BAD910602AF8A8D7553050614C0";
  static const uint8_t binary_fingerprint[16]; // = {0x4E,0xD3,0x7B,0xAD,0x91,0x06,0x02,0xAF,0x8A,0x8D,0x75,0x53,0x05,0x06,0x14,0xC0};

  TTableDesc(const TTableDesc&);
  TTableDesc& operator=(const TTableDesc&);
  TTableDesc() : tableName(), path(), storeType(), isExternal(0) {
  }

  virtual ~TTableDesc() throw();
  std::string tableName;
  std::string path;
  std::string storeType;
  std::map<std::string, std::string>  tableMeta;
  TSchema schema;
  TTableStats stats;
  TPartitionMethod partition;
  bool isExternal;

  _TTableDesc__isset __isset;

  void __set_tableName(const std::string& val);

  void __set_path(const std::string& val);

  void __set_storeType(const std::string& val);

  void __set_tableMeta(const std::map<std::string, std::string> & val);

  void __set_schema(const TSchema& val);

  void __set_stats(const TTableStats& val);

  void __set_partition(const TPartitionMethod& val);

  void __set_isExternal(const bool val);

  bool operator == (const TTableDesc & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(storeType == rhs.storeType))
      return false;
    if (!(tableMeta == rhs.tableMeta))
      return false;
    if (!(schema == rhs.schema))
      return false;
    if (!(stats == rhs.stats))
      return false;
    if (!(partition == rhs.partition))
      return false;
    if (!(isExternal == rhs.isExternal))
      return false;
    return true;
  }
  bool operator != (const TTableDesc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTableDesc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TTableDesc& obj);
};

void swap(TTableDesc &a, TTableDesc &b);

typedef struct _TRowData__isset {
  _TRowData__isset() : nullFlags(false), columnDatas(false) {}
  bool nullFlags :1;
  bool columnDatas :1;
} _TRowData__isset;

class TRowData {
 public:

  static const char* ascii_fingerprint; // = "AAC17AFDB1C7D605311FBCBA63ABE008";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0xC1,0x7A,0xFD,0xB1,0xC7,0xD6,0x05,0x31,0x1F,0xBC,0xBA,0x63,0xAB,0xE0,0x08};

  TRowData(const TRowData&);
  TRowData& operator=(const TRowData&);
  TRowData() {
  }

  virtual ~TRowData() throw();
  std::vector<bool>  nullFlags;
  std::vector<std::string>  columnDatas;

  _TRowData__isset __isset;

  void __set_nullFlags(const std::vector<bool> & val);

  void __set_columnDatas(const std::vector<std::string> & val);

  bool operator == (const TRowData & rhs) const
  {
    if (!(nullFlags == rhs.nullFlags))
      return false;
    if (!(columnDatas == rhs.columnDatas))
      return false;
    return true;
  }
  bool operator != (const TRowData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRowData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TRowData& obj);
};

void swap(TRowData &a, TRowData &b);

typedef struct _TQueryResult__isset {
  _TQueryResult__isset() : tableDesc(false), rows(false), schema(false) {}
  bool tableDesc :1;
  bool rows :1;
  bool schema :1;
} _TQueryResult__isset;

class TQueryResult {
 public:

  static const char* ascii_fingerprint; // = "6929FF7F81C3659DCAFCDD2FA5608629";
  static const uint8_t binary_fingerprint[16]; // = {0x69,0x29,0xFF,0x7F,0x81,0xC3,0x65,0x9D,0xCA,0xFC,0xDD,0x2F,0xA5,0x60,0x86,0x29};

  TQueryResult(const TQueryResult&);
  TQueryResult& operator=(const TQueryResult&);
  TQueryResult() {
  }

  virtual ~TQueryResult() throw();
  TTableDesc tableDesc;
  std::vector<TRowData>  rows;
  TSchema schema;

  _TQueryResult__isset __isset;

  void __set_tableDesc(const TTableDesc& val);

  void __set_rows(const std::vector<TRowData> & val);

  void __set_schema(const TSchema& val);

  bool operator == (const TQueryResult & rhs) const
  {
    if (!(tableDesc == rhs.tableDesc))
      return false;
    if (!(rows == rhs.rows))
      return false;
    if (!(schema == rhs.schema))
      return false;
    return true;
  }
  bool operator != (const TQueryResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TQueryResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TQueryResult& obj);
};

void swap(TQueryResult &a, TQueryResult &b);

typedef struct _TGetQueryStatusResponse__isset {
  _TGetQueryStatusResponse__isset() : resultCode(false), queryId(false), state(false), progress(false), submitTime(false), finishTime(false), hasResult(false), errorMessage(false), errorTrace(false), queryMasterHost(false), queryMasterPort(false), queryResult(false) {}
  bool resultCode :1;
  bool queryId :1;
  bool state :1;
  bool progress :1;
  bool submitTime :1;
  bool finishTime :1;
  bool hasResult :1;
  bool errorMessage :1;
  bool errorTrace :1;
  bool queryMasterHost :1;
  bool queryMasterPort :1;
  bool queryResult :1;
} _TGetQueryStatusResponse__isset;

class TGetQueryStatusResponse {
 public:

  static const char* ascii_fingerprint; // = "B353B604FF6B0A6D90F2BF75125E13D0";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x53,0xB6,0x04,0xFF,0x6B,0x0A,0x6D,0x90,0xF2,0xBF,0x75,0x12,0x5E,0x13,0xD0};

  TGetQueryStatusResponse(const TGetQueryStatusResponse&);
  TGetQueryStatusResponse& operator=(const TGetQueryStatusResponse&);
  TGetQueryStatusResponse() : resultCode(), queryId(), state(), progress(0), submitTime(0), finishTime(0), hasResult(0), errorMessage(), errorTrace(), queryMasterHost(), queryMasterPort(0) {
  }

  virtual ~TGetQueryStatusResponse() throw();
  std::string resultCode;
  std::string queryId;
  std::string state;
  double progress;
  int64_t submitTime;
  int64_t finishTime;
  bool hasResult;
  std::string errorMessage;
  std::string errorTrace;
  std::string queryMasterHost;
  int32_t queryMasterPort;
  TQueryResult queryResult;

  _TGetQueryStatusResponse__isset __isset;

  void __set_resultCode(const std::string& val);

  void __set_queryId(const std::string& val);

  void __set_state(const std::string& val);

  void __set_progress(const double val);

  void __set_submitTime(const int64_t val);

  void __set_finishTime(const int64_t val);

  void __set_hasResult(const bool val);

  void __set_errorMessage(const std::string& val);

  void __set_errorTrace(const std::string& val);

  void __set_queryMasterHost(const std::string& val);

  void __set_queryMasterPort(const int32_t val);

  void __set_queryResult(const TQueryResult& val);

  bool operator == (const TGetQueryStatusResponse & rhs) const
  {
    if (!(resultCode == rhs.resultCode))
      return false;
    if (!(queryId == rhs.queryId))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(progress == rhs.progress))
      return false;
    if (!(submitTime == rhs.submitTime))
      return false;
    if (!(finishTime == rhs.finishTime))
      return false;
    if (!(hasResult == rhs.hasResult))
      return false;
    if (!(errorMessage == rhs.errorMessage))
      return false;
    if (!(errorTrace == rhs.errorTrace))
      return false;
    if (!(queryMasterHost == rhs.queryMasterHost))
      return false;
    if (!(queryMasterPort == rhs.queryMasterPort))
      return false;
    if (!(queryResult == rhs.queryResult))
      return false;
    return true;
  }
  bool operator != (const TGetQueryStatusResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGetQueryStatusResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGetQueryStatusResponse& obj);
};

void swap(TGetQueryStatusResponse &a, TGetQueryStatusResponse &b);

typedef struct _TServerResponse__isset {
  _TServerResponse__isset() : resultCode(false), boolResult(false), errorMessage(false), detailErrorMessage(false), sessionId(false) {}
  bool resultCode :1;
  bool boolResult :1;
  bool errorMessage :1;
  bool detailErrorMessage :1;
  bool sessionId :1;
} _TServerResponse__isset;

class TServerResponse {
 public:

  static const char* ascii_fingerprint; // = "55F05A45A6E335B039B8DEE3FEA1D5D3";
  static const uint8_t binary_fingerprint[16]; // = {0x55,0xF0,0x5A,0x45,0xA6,0xE3,0x35,0xB0,0x39,0xB8,0xDE,0xE3,0xFE,0xA1,0xD5,0xD3};

  TServerResponse(const TServerResponse&);
  TServerResponse& operator=(const TServerResponse&);
  TServerResponse() : resultCode(), boolResult(0), errorMessage(), detailErrorMessage(), sessionId() {
  }

  virtual ~TServerResponse() throw();
  std::string resultCode;
  bool boolResult;
  std::string errorMessage;
  std::string detailErrorMessage;
  std::string sessionId;

  _TServerResponse__isset __isset;

  void __set_resultCode(const std::string& val);

  void __set_boolResult(const bool val);

  void __set_errorMessage(const std::string& val);

  void __set_detailErrorMessage(const std::string& val);

  void __set_sessionId(const std::string& val);

  bool operator == (const TServerResponse & rhs) const
  {
    if (!(resultCode == rhs.resultCode))
      return false;
    if (!(boolResult == rhs.boolResult))
      return false;
    if (!(errorMessage == rhs.errorMessage))
      return false;
    if (!(detailErrorMessage == rhs.detailErrorMessage))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const TServerResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TServerResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TServerResponse& obj);
};

void swap(TServerResponse &a, TServerResponse &b);

typedef struct _TBriefQueryInfo__isset {
  _TBriefQueryInfo__isset() : queryId(false), state(false), startTime(false), finishTime(false), query(false), queryMasterHost(false), queryMasterPort(false), progress(false) {}
  bool queryId :1;
  bool state :1;
  bool startTime :1;
  bool finishTime :1;
  bool query :1;
  bool queryMasterHost :1;
  bool queryMasterPort :1;
  bool progress :1;
} _TBriefQueryInfo__isset;

class TBriefQueryInfo {
 public:

  static const char* ascii_fingerprint; // = "F6E967335A53372B733562C4804A4FCB";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0xE9,0x67,0x33,0x5A,0x53,0x37,0x2B,0x73,0x35,0x62,0xC4,0x80,0x4A,0x4F,0xCB};

  TBriefQueryInfo(const TBriefQueryInfo&);
  TBriefQueryInfo& operator=(const TBriefQueryInfo&);
  TBriefQueryInfo() : queryId(), state(), startTime(0), finishTime(0), query(), queryMasterHost(), queryMasterPort(0), progress(0) {
  }

  virtual ~TBriefQueryInfo() throw();
  std::string queryId;
  std::string state;
  int64_t startTime;
  int64_t finishTime;
  std::string query;
  std::string queryMasterHost;
  int32_t queryMasterPort;
  double progress;

  _TBriefQueryInfo__isset __isset;

  void __set_queryId(const std::string& val);

  void __set_state(const std::string& val);

  void __set_startTime(const int64_t val);

  void __set_finishTime(const int64_t val);

  void __set_query(const std::string& val);

  void __set_queryMasterHost(const std::string& val);

  void __set_queryMasterPort(const int32_t val);

  void __set_progress(const double val);

  bool operator == (const TBriefQueryInfo & rhs) const
  {
    if (!(queryId == rhs.queryId))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(finishTime == rhs.finishTime))
      return false;
    if (!(query == rhs.query))
      return false;
    if (!(queryMasterHost == rhs.queryMasterHost))
      return false;
    if (!(queryMasterPort == rhs.queryMasterPort))
      return false;
    if (!(progress == rhs.progress))
      return false;
    return true;
  }
  bool operator != (const TBriefQueryInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TBriefQueryInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TBriefQueryInfo& obj);
};

void swap(TBriefQueryInfo &a, TBriefQueryInfo &b);

}}} // namespace

#endif
